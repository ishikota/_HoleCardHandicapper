#!/usr/bin/env python

# Resolve path configuration
import os
import sys
import importlib
import argparse
import json

root = os.path.join(os.path.dirname(__file__), "..")
learning_data_path = os.path.join(root, "learning_data")
sys.path.append(root)
sys.path.append(learning_data_path)

# Start script code from here
from learning_data.generator.hole_evaluator import HoleEvaluator
from pypokerengine.engine.card import Card
import random
import csv
import time
import numpy as np
from scipy import stats

def parse_args():
  parser = argparse.ArgumentParser(description="Set test data configuration")
  parser.add_argument("--n", type=int, required=True, help="number of data to generate")
  args = parser.parse_args()
  return args.n

def generate_data(data_num_for_each_pair):
  head = ["hole1", "hole2", "max", "min", "mean", "25%", "50%", "75%", "var", "stat"]
  stats = []
  stats.append(head)
  for hole1_card_id in range(1, 52):
    for hole2_card_id in range(hole1_card_id+1, 53):
      c1, c2 = [Card.from_id(hole1_card_id), Card.from_id(hole2_card_id)]
      f = lambda d, _ : d + [HoleEvaluator.eval_hole([c1, c2])]
      data = reduce(f, range(data_num_for_each_pair), [])
      data = [d[0] for d in data]
      data_nums = np.array(data)
      stats.append(calc_stat(c1, c2, data_nums))
  return stats

def calc_stat(c1, c2, nums):
  stat = []
  stat.append(str(c1))
  stat.append(str(c2))
  stat.append(np.max(nums))
  stat.append(np.min(nums))
  stat.append(np.mean(nums))
  stat.append(stats.scoreatpercentile(nums, 25))
  stat.append(np.median(nums))
  stat.append(stats.scoreatpercentile(nums, 75))
  stat.append(np.var(nums))
  stat.append(np.std(nums))
  return stat

def save_data(file_path, data):
  with open(file_path, 'w') as f:
    writer = csv.writer(f, lineterminator='\n')
    writer.writerows(data)

def gen_file_path(data_num):
  file_name = "data-num-%d-investigate.csv" % (data_num)
  return os.path.join(learning_data_path, "investigate", file_name)

def main():
  start_time = time.time()
  data_num = parse_args()
  data = generate_data(data_num)
  save_data(gen_file_path(data_num), data)
  print "Execution time : %f (s)" % (time.time() - start_time)

if __name__ == '__main__':
  main()

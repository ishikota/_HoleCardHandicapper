#!/usr/bin/env python

# Resolve path configuration
import os
import sys
import importlib
import argparse
import json

root = os.path.join(os.path.dirname(__file__), "..")
module_root_path = os.path.join(root, "holecard_handicapper")
sys.path.append(root)
sys.path.append(module_root_path)

# Start script code from here
from holecard_handicapper.training.trainer import Trainer

def parse_args():
  parser = argparse.ArgumentParser(description="Receive path of model builder")
  parser.add_argument("--model_builder_path", required=True, help="path to your model builder class")
  parser.add_argument("--trainer_params_path", required=True, help="path to your trainer config file")
  parser.add_argument("--data_file_path", help="path to your data src file")
  parser.add_argument("--test_ratio", type=float, default=0.1, help="ratio between training data and test data")
  parser.add_argument("--slack_token", default=None, help="API token of slack")
  args = parser.parse_args()
  trainer_params = read_trainer_params(args.trainer_params_path)
  return args.model_builder_path, trainer_params, args.data_file_path, args.test_ratio, args.slack_token

def read_trainer_params(file_path):
  with open(file_path) as json_file:
    data = json.load(json_file)
    return (data["nb_epoch"], data["batch_size"], data["verbose"], data["validation_split"])

def import_data_reader(directory_path):
  sys.path.append(directory_path)
  m = importlib.import_module('data_reader')
  return m

def main():
  model_builder_path, trainer_params, data_path, test_ratio, slack_token = parse_args()
  data_reader = import_data_reader(os.path.dirname(model_builder_path))
  data = data_reader.load_data(data_path, test_ratio)
  trainer = Trainer(*trainer_params)
  if slack_token:
    trainer.use_slack(slack_token)
  trainer.train(data, model_builder_path)

if __name__ == '__main__':
  main()
